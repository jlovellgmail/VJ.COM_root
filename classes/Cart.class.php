<?php

$rootpath = $_SERVER['DOCUMENT_ROOT'];
include $rootpath . '/incs/conn.php';
include $rootpath . "/core/ShoppingCart.class.php";

//include $rootpath . "/classes/Order.class.php";

class Cart extends ShoppingCart {

    /**
     * @var Address $ShippingAddr Address to ship products in Shopping Cart
     */
    protected $ShippingAddr;

    /**
     * @var Address $BillingAddr Billing Address for the user checking out the Cart
     */
    protected $BillingAddr;

    /**
     * @var string $Notes Notes enter by user for Shopping Cart
     */
    protected $Notes;

    /**
     * @var int $SCID Database Shopping Cart ID
     */
    protected $SCID;

    /**
     *
     * @var CreditCard  
     */
    protected $CreditCard;

    /**
     *
     * @var string - Possible values 'paypal','cc' 
     */
    protected $PaymMethod;

    /**
     * @var int $UsrID 
     */
    protected $UsrID;

    /**
     *
     * @var string - PHP Session ID 
     */
    protected $SessionID;

    /**
     * @var string $Email 
     */
    
    /**
     *
     * @var boolean - If the tax was calculated or not 
     */
    protected $TaxCalculated;
    
    /**
     *
     * @var money - Tax Amount 
     */
    protected $TaxAmt;
    
    /**
     *
     * @var string => Tax Invoice No  
     */
    protected $TaxInvoiceNo;
    
    /**
     *
     * @var string $UserMode => Guest  / New User / Existing
     */
    protected $UserMode;
    protected $Email;
    protected $TotalItms;

    /**
     * 
     * @param type $Mode -> Set the use mode => Guest / New user / existing
     */
    public function setUsrMode($Mode) {
        $this->UserMode = $Mode;
    }
    
    /**
     * 
     * @return string -> Get the use mode => Guest / New user / existing
     */
    public function getUsrMode() {
        return $this->UserMode;
    }
    
    /**
     * 
     * @param boolean $taxFlag - Set the flag if the tax was calculated or not
     */
    public function setTaxFlag($taxFlag){
        $this->TaxCalculated=$taxFlag;
    }
    
    /**
     * 
     * @return boolen - Get the flag if the tax was calculated or not
     */
    public function getTaxFlag(){
        return $this->TaxCalculated;
    }
    
    /**
     * 
     * @param money $Amt - Sets the tax amount
     */
    public function setTaxAmt($Amt){
        $this->TaxAmt=$Amt;
    }
    
    /**
     * 
     * @return money - Gets the tax amount
     */
    public function getTaxAmt(){
        return $this->TaxAmt;
    }
    
    /**
     * 
     * @param string $InvoiceNo - Invoice generated by the tax Server
     */
    
    public function setTaxInvoice($InvoiceNo){
        $this->TaxInvoiceNo=$InvoiceNo;
    }
    
    /**
     * 
     * @return string - Invoice number for tax purpose
     */
    public function getTaxInvoice(){
        return $this->TaxInvoiceNo;
    }
    
    
    /**
     * Returns to total Price of the shopping cart
     * @return float toal of shopping cart
     */
    public function getTotalWithOutTax() {
        $total = 0;
        foreach ($this->items as $itemArr) {
            $item = $itemArr["item"];
            $qty = $itemArr["qty"];
            $total += $qty * $item->getVar("Price");
        }
        return number_format((float) $total, 0, '.', ',');
    }
    
    /**
     * Returns to total Price of the shopping cart
     * @return float toal of shopping cart
     */
    public function getTotal() {
        $total = 0;
        foreach ($this->items as $itemArr) {
            $item = $itemArr["item"];
            $qty = $itemArr["qty"];
            $total += $qty * $item->getVar("Price");
        }
        if ($this->TaxCalculated && $this->TaxAmt >0){
            $total += $this->TaxAmt;
        }
        return number_format((float) $total, 2, '.', ',');
    }

    /**
     * Adds the shipping address for the shopping cart
     * @param Address $addr
     */
    public function addShipAddr($addr) {
        $this->ShippingAddr = $addr;
    }

    public function deleteShipAddr() {
        $this->ShippingAddr = null;
    }

    /**
     * return Shipping Address
     * @return Address 
     */
    public function getShipAddr() {
        return $this->ShippingAddr;
    }

    /**
     * Adds the billing address for the shopping cart
     * @param Address $addr
     */
    public function addBillAddr($addr) {
        $this->BillingAddr = $addr;
    }

    public function deleteBillAddr() {
        $this->BillingAddr = null;
    }

    /**
     * Returns the Billing Address
     * @return Address
     */
    public function getBillAddr() {
        return $this->BillingAddr;
    }

    /**
     * Adds credit card details to Shopping Card
     * @param CreditCard $cc
     */
    public function addCreditCard($cc) {
        $this->PaymMethod = "cc";
        $this->CreditCard = $cc;
    }

    /**
     * 
     * @return CrediCard
     */
    public function getCreditCard() {
        return $this->CreditCard;
    }

    /**
     * Set the payment method - Possible values 'cc', 'paypal'
     * @param string $method
     */
    public function setPaymMethod($method) {
        $this->PaymMethod = $method;
    }

    /**
     * 
     * @return string - Returns the payment method.
     */
    public function getPaymMethod() {
        return $this->PaymMethod;
    }

    /**
     * Add notes for shippments 
     * @param string $notes
     */
    public function addShipNotes($notes) {
        if (isset($this->SCID) && $this->SCID > 0) {
            $dbconn = database::getInstance();
            $sql = "{CALL S_UpdShipNotes(@SCID=:scID, @Notes=:shpNote)}";
            $param = array(":scID" => $this->SCID, ":shpNote" => $notes);
            $dbconn->doQueryParam($sql, $param);
            $this->Notes = $notes;
        } else {
            echo "Error trying to update shipping notes in shopping cart. SCID doesnot exist.";
        }
    }

    /**
     * 
     * @return string
     */
    public function getShipNotes() {
        return $this->Notes;
    }

    /**
     * Delete shipping Notes form Cart
     */
    public function delShipNotes() {
        $this->Notes = NULL;
    }

    /**
     * Return the database shopping cart id.
     * @return int
     */
    public function getSCID() {
        return $this->SCID;
    }

    /**
     * Sets the database shopping cart id.
     * @param int $scid
     */
    public function setSCID($scid) {
        $this->SCID = $scid;
    }

    /**
     * Set the email for a shopping cart
     * @param string $email
     */
    public function setEmail($email) {
        $this->Email = $email;
    }

    /**
     * 
     * @return string
     */
    public function getEmail() {
        return $this->Email;
    }

    public function setUsr($userID) {
        $this->UsrID = $userID;
    }

    public function getUsrID() {
        return $this->UsrID;
    }

    /**
     * Initialize the shopping cart => If a guest user then we are creating a cart with user =0 and use session ID
     * @param int $usrID
     * @param string $sessionId - PHP Session ID
     */
    public function initialize($usrID, $sessionId) {
        $this->UsrID == $usrID;
        $this->SessionID = $sessionId;
        if (isset($usrID) && $usrID > 0) {
            $this->initializeFromDB($usrID);
        } else {
            $this->initializeFromDBBySsn($sessionId);
        }
    }

    /**
     * If the user is not logged in we initialize a database cart based on PHP Session ID. We will keep
     * this Cart in Session and in Database in order to seperate the products if user adds the same products
     * more than one time. When user log in we will merge this Cart with the user database cart
     * @param string $ssnID
     */
    function initializeFromDBBySsn($ssnID) {
        if (isset($ssnID) && $ssnID != "") {
            $this->SessionID = $ssnID;
            $dbconn = database::getInstance();
            $sql = "{CALL S_ShopCartBySsn(@SsnID=:ssnID)}";
            $param = array(":ssnID" => $ssnID);
            $dbconn->doQueryParam($sql, $param);
            $res = $dbconn->loadObjectList();
            $noItms = $dbconn->getRows();
            if ($noItms > 0) {
                foreach ($res as $row) {
                    $this->SCID = $row["ShopCartID"];
                    $this->TaxCalculated=FALSE;
                    if (isset($row["PID"])) {
                        $Product = new Product();
                        $Product->initialize($row["PID"]);
                        $this->addItemToCart($Product, $row["Qty"]);
                        //parent::addItem($Product, $row["Qty"]);
                    }
                }
            } else {
                $sql = "{CALL S_InsertNewCartBySsn (@SsnID=:ssnID )}";
                $param = array(":ssnID" => $ssnID);
                $dbconnInsert = database::getInstance();
                $dbconnInsert->doQueryParam($sql, $param);
                $this->SCID = $dbconnInsert->getInsertIDFromStorProc();
                $this->TaxCalculated=FALSE;
            }
        }
    }

    /**
     * Initialize the Cart from the Database based on the user id.
     * @param int $usrID
     */
    public function initializeFromDB($usrID) {
        if (isset($usrID) && $usrID > 0) {
            $this->UsrID = $usrID;
            $this->Email = $_SESSION["UsrEmail"];
            $dbconn = database::getInstance();
            $sql = "{CALL S_ShopCartByUser(@UsrID=:userID)}";
            $param = array(":userID" => $usrID);
            $dbconn->doQueryParam($sql, $param);
            $res = $dbconn->loadObjectList();
            $noItms = $dbconn->getRows();
            if ($noItms > 0) {
                foreach ($res as $row) {
                    $this->SCID = $row["ShopCartID"];
                    $this->TaxCalculated=FALSE;
                    
                    if (isset($row["PID"])) {
                        $Product = new Product();
                        $Product->initialize($row["PID"]);
                        $Product->setSCProdID($row["SCProdID"]);
                        //$this->addItemToCart($Product, $row["Qty"]);
                        parent::addItem($Product, $row["Qty"]);
                    }
                }
            } else {
                $sql = "{CALL S_InsertNewCart (@UsrID=:usrID )}";
                $param = array(":usrID" => $usrID);
                $dbconnInsert = database::getInstance();
                $dbconnInsert->doQueryParam($sql, $param);
                $this->SCID = $dbconnInsert->getInsertIDFromStorProc();
                $this->UsrID = $usrID;
                $this->TaxCalculated=FALSE;
            }
        }
    }

    public function generateOrder() {
        $rootpath = $_SERVER['DOCUMENT_ROOT'];
        include $rootpath . '/classes/Address.class.php';
        $Order = new Order();
        $Order->setVar("SCID", $this->SCID);
        $Order->setVar("Email", $this->Email);
        $Order->setVar("ShipNotes", $this->Notes);
        $ShipAddr = $this->ShippingAddr;
        $OrdShipUsr = $ShipAddr->getVar("UsrID");
        if (isset($ShipAddr) && isset($OrdShipUsr) && $OrdShipUsr != "") {
            $OrdShipAddr = new Address();
            $OrdShipAddr->setVar("FName", $ShipAddr->getVar("FName"));
            $OrdShipAddr->setVar("LName", $ShipAddr->getVar("LName"));
            $OrdShipAddr->setVar("Addr1", $ShipAddr->getVar("Addr1"));
            $OrdShipAddr->setVar("Addr2", $ShipAddr->getVar("Addr2"));
            $OrdShipAddr->setVar("City", $ShipAddr->getVar("City"));
            $OrdShipAddr->setVar("State", $ShipAddr->getVar("State"));
            $OrdShipAddr->setVar("Country", $ShipAddr->getVar("Country"));
            $OrdShipAddr->setVar("Phone", $ShipAddr->getVar("Phone"));
            $OrdShipAddr->setVar("Type", $ShipAddr->getVar("Type"));
            $OrdShipAddr->setVar("Postal", $ShipAddr->getVar("Postal"));
            $OrdShipAddr->store();
            $Order->setVar("ShippingAddr", $OrdShipAddr);
        } else {
            $Order->setVar("ShippingAddr", $this->ShippingAddr);
        }
        if ($this->PaymMethod == "cc") {
            $BillAddr = $this->BillingAddr;
            $OrdBillUsr = $BillAddr->getVar("UsrID");
            if (isset($BillAddr) && isset($OrdBillUsr) && $OrdBillUsr != "") {
                $OrdBillAddr = new Address();
                $OrdBillAddr->setVar("FName", $BillAddr->getVar("FName"));
                $OrdBillAddr->setVar("LName", $BillAddr->getVar("LName"));
                $OrdBillAddr->setVar("Addr1", $BillAddr->getVar("Addr1"));
                $OrdBillAddr->setVar("Addr2", $BillAddr->getVar("Addr2"));
                $OrdBillAddr->setVar("City", $BillAddr->getVar("City"));
                $OrdBillAddr->setVar("State", $BillAddr->getVar("State"));
                $OrdBillAddr->setVar("Country",$BillAddr->getVar("Country"));
                $OrdBillAddr->setVar("Phone", $BillAddr->getVar("Phone"));
                $OrdBillAddr->setVar("Type", $BillAddr->getVar("Type"));
                $OrdBillAddr->setVar("Postal",$BillAddr->getVar("Postal"));
                $OrdBillAddr->store();
                $Order->setVar("BillingAddr", $OrdBillAddr);
            }
            else {
                $Order->setVar("BillingAddr", $this->BillingAddr);
            }
        }
        
        $Order->setVar("UsrID", $this->UsrID);
        $Order->setVar("SessionID", $this->SessionID);
        $Order->setVar("PaymMethod", $this->PaymMethod);
        $Order->setVar("CreditCard", $this->CreditCard);
        $Order->setVar("items", $this->items);
        $Order->setVar("ids", $this->ids);
        $Order->setVar("Amt", $this->getTotalWithOutTax());
        if ($this->TaxCalculated && $this->TaxAmt>0){
            $Order->setVar("TaxAmt", $this->TaxAmt);
            $Order->setVar("TaxInvoice", $this->TaxInvoiceNo);
        }else {
            $Order->setVar("TaxAmt", 0);
            $Order->setVar("TaxInvoice", "");
        }
        
        return $Order;
    }

    /**
     * Intitialize the Cart from the database
     * @param int $UsrID
     */
    public function initializeFromDB___OLD($usrID) {
        if (isset($usrID) && $usrID > 0) {
            $this->UsrID = $usrID;
            $dbconn = database::getInstance();
            $sql = "{CALL S_ShopCartDetByUser (@UsrID=:userID)}";
            $param = array(":userID" => $usrID);
            $dbconn->doQueryParam($sql, $param);
            $res = $dbconn->loadObjectList();
            $noItms = $dbconn->getRows();
            if ($noItms > 0) {
                foreach ($res as $row) {
                    $this->SCID = $row["SCID"];
                    $Product = new Product();
                    $Product->initialize($row["PID"]);
                    parent::addItem($Product, $row["Qty"]);
                }
            } else {
                $sql = "{CALL S_CheckCartExist (@UsrID=:usrID )}";
                $param = array(":usrID" => $usrID);
                $dbconn->doQueryParam($sql, $param);
                $scRes = $dbconn->loadObjectList();
                $noSC = $dbconn->getRows();
                if ($noSC > 0) {
                    foreach ($scRes as $row) {
                        $this->SCID = $row["SCID"];
                    }
                    $this->UsrID = $usrID;
                } else {
                    $sql = "{CALL S_InsertNewCart (@UsrID=:usrID )}";
                    $param = array(":usrID" => $usrID);
                    $dbconnInsert = database::getInstance();
                    $dbconnInsert->doQueryParam($sql, $param);
                    $this->SCID = $dbconnInsert->getInsertIDFromStorProc();
                    $this->UsrID = $usrID;
                }
            }
        }
    }

    public function addItemToCart(Product $item, $qty) {
        if (isset($this->SCID) && $this->SCID > 0) {
            $dbconn = database::getInstance();
            $sql = "{CALL S_InsertProdToCart (@SCID=:scID, @PID=:PID, @QTY=:qty )}";
            $param = array(":scID" => $this->SCID, ":PID" => $item->getPID(), ":qty" => $qty);
            $dbconn->doQueryParam($sql, $param);
            $item->setSCProdID($dbconn->getInsertIDFromStorProc());
            parent::addItem($item, $qty);
        } else {
            echo "Error trying to add item to shopping cart. SCID doesnot exist.";
        }
    }

    /**
     * Delete Product from cart
     * @param Product $item
     */
    public function deleteItemFromCart(Product $item) {
        if (isset($this->SCID) && $this->SCID > 0) {
            $dbconn = database::getInstance();
            $sql = "{CALL S_DelProductFromSC (@SCID=:scID, @PID=:PID)}";
            $param = array(":scID" => $this->SCID, ":PID" => $item->getId());
            $dbconn->doQueryParam($sql, $param);
            parent::deleteItem($item);
        } else {
            echo "Error trying to delete item from shopping cart. SCID doesnot exist.";
        }
    }

    /**
     * Update Database with the new qty for a specific product
     * @param Product $item
     * @param type $qty
     */
    public function updateItemToCart(Product $item, $qty) {
        if (isset($this->SCID) && $this->SCID > 0) {
            $dbconn = database::getInstance();
            $sql = "{CALL S_UpdateProdQtyInSC (@SCID=:scID, @PID=:PID, @QTY=:qty)}";
            $param = array(":scID" => $this->SCID, ":PID" => $item->getid(), ":qty" => $qty);
            $dbconn->doQueryParam($sql, $param);
            parent::updateItem($item, $qty);
        } else {
            echo "Error trying to update qty in shopping cart. SCID doesnot exist.";
        }
    }

    /**
     * Checks if the product exist in shopping cart
     * @param int $pid
     * @return boolean
     */
    public function productExist($pid) {
        if (isset($this->items[$pid])) {
            return TRUE;
        } else {
            return FALSE;
        }
    }

    /**
     * Checks if there is a cart created on the Database. Need to run initializeFromDB first.
     * @return boolean
     */
    public function DBCartExist() {
        if (isset($this->SCID)) {
            return TRUE;
        } else {
            return FALSE;
        }
    }

    /**
     * Check the Shopping Cart from the Database
     * @param int $usrID
     */
    public function createDbCart($usrID) {
        $dbconn = database::getInstance();
        $sql = "{CALL S_CheckCartExist (@UsrID=:usrID )}";
        $param = array(":usrID" => $usrID);
        $dbconn->doQueryParam($sql, $param);
        $scRes = $dbconn->loadObjectList();
        $noSC = $dbconn->getRows();
        if ($noSC == 0) {
            $sql = "Insert Into Shopcart (UsrID) values (" . $usrID . ");SELECT SCOPE_IDENTITY() AS LastInsertID";
            $dbconnInsert = database::getInstance();
            $dbconnInsert->doQuery($sql);
            $this->SCID = $dbconnInsert->getInsertID();
        } else {
            foreach ($scRes as $row) {
                $this->SCID = $row["SCID"];
            }
        }
        $this->UsrID = $usrID;
    }

    /**
     * ******NOT IN USE ANYMORE !!!!!!!! ****************************
     * Add the product and its quantity to the database
     * @param Product $item
     * @param int $qty
     */
    public function addItemToDB(Product $item, $qty) {
        if (isset($this->SCID) && $this->SCID > 0) {
            $dbconn = database::getInstance();
            $sql = "{CALL S_InsertProdToCart (@SCID=:scID, @PID=:PID, @QTY=:qty )}";
            $param = array(":scID" => $this->SCID, ":PID" => $item->getId(), ":qty" => $qty);
            $dbconn->doQueryParam($sql, $param);
            //parent::addItem($item,$qty);
        } else {
            echo "Error trying to add item to shopping cart. SCID doesnot exist.";
        }
    }

    /**
     * ******NOT IN USE ANYMORE !!!!!!!! ****************************
     * Delete Product from cart
     * @param Product $item
     */
    public function deleteItemFromDB(Product $item) {
        if (isset($this->SCID) && $this->SCID > 0) {
            $dbconn = database::getInstance();
            $sql = "{CALL S_DelProductFromSC (@SCID=:scID, @PID=:PID)}";
            $param = array(":scID" => $this->SCID, ":PID" => $item->getId());
            $dbconn->doQueryParam($sql, $param);
        } else {
            echo "Error trying to delete item from shopping cart. SCID doesnot exist.";
        }
    }

    /**
     * ******NOT IN USE ANYMORE !!!!!!!! ****************************
     * Update Database with the new qty for a specific product
     * @param Product $item
     * @param type $qty
     */
    public function updateItemToDB(Product $item, $qty) {
        if (isset($this->SCID) && $this->SCID > 0) {
            $dbconn = database::getInstance();
            $sql = "{CALL S_UpdateProdQtyInSC (@SCID=:scID, @PID=:PID, @QTY=:qty)}";
            $param = array(":scID" => $this->SCID, ":PID" => $item->getId(), ":qty" => $qty);
            $dbconn->doQueryParam($sql, $param);
        } else {
            echo "Error trying to update qty in shopping cart. SCID doesnot exist.";
        }
    }

}

?>